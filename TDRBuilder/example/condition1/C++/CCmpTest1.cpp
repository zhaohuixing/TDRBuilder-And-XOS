/*Generated by Zhaohui Xing TDRBuilder v1.0*/
#include "CCmpTest1.h"
#include "xvsmath.h"


#include <math.h>


CCmpTest1::CCmpTest1(void)
{
	Startup();
	m_nRegister = -1;
}

CCmpTest1::~CCmpTest1(void)
{
}

void CCmpTest1::Startup(void)
{
}

long CCmpTest1::Initialize(void)
{
	g1 = 0.000000;
	g2 = 0.000000;


	lb1 = false;


	m_nRegister = 0;
	return m_nRegister;
}

void CCmpTest1::Run(void)
{
	m_nRegister = Initialize();
	do
	{
		m_nRegister = StepProcess();
	}while(m_nRegister != -4 && m_nRegister != -1);
}

long CCmpTest1::StepProcess(void)
{
	switch(m_nRegister)
	{
		case 0:
			m_nRegister = Processor0();
			break;
		case 1:
			m_nRegister = Compare1();
			break;
		case 2:
			m_nRegister = Compare2();
			break;
		case 3:
			m_nRegister = Processor3();
			break;
		case 4:
			m_nRegister = Processor4();
			break;
		default:
			m_nRegister = -1;
	}
	return m_nRegister;
}

long CCmpTest1::Processor0(void)
{
	g1 = -1.9;
	g2 = -6.8;
	m_nRegister = 1;
	return m_nRegister;
}


long CCmpTest1::Compare1(void)
{
	bool  bCmp;
	bCmp = (g1>=-g2);


	if (bCmp)
	{
		m_nRegister = 4;
	}
	else
	{
		m_nRegister = 2;
	}


	return m_nRegister;
}


long CCmpTest1::Compare2(void)
{
	bool  bCmp;
	bCmp = (g2<=-2.4);


	if (bCmp)
	{
		m_nRegister = 3;
	}
	else
	{
		m_nRegister = -4;
	}


	return m_nRegister;
}


long CCmpTest1::Processor3(void)
{
	lb1 = true;
	m_nRegister = -4;
	return m_nRegister;
}


long CCmpTest1::Processor4(void)
{
	lb1 = false;
	m_nRegister = -4;
	return m_nRegister;
}


/*Powered by Zhaohui Xing TDRBuilder v1.0*/
